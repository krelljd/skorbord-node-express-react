openapi: 3.1.0
info:
  title: Card Game Scoring API
  version: 1.0.1
  description: |
    REST API for managing card game scoreboards, players, rounds, scores, and rivalries.
    All endpoints are under the `/api/cards/` base path.
servers:
  - url: /api/cards
paths:
  /games:
    get:
      summary: List all games
      parameters:
        - $ref: '#/components/parameters/sqid'
      responses:
        '200':
          description: List of games
        '500':
          description: Server/database error
    post:
      summary: Create a new game
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameCreate'
      responses:
        '201':
          description: Game created
        '400':
          description: Invalid input
        '500':
          description: Server/database error
  /games/{gameId}:
    get:
      summary: Get game details
      parameters:
        - $ref: '#/components/parameters/gameId'
        - $ref: '#/components/parameters/sqid'
      responses:
        '200':
          description: Game details
        '404':
          description: Game not found
        '500':
          description: Server/database error
    put:
      summary: Update game
      parameters:
        - $ref: '#/components/parameters/gameId'
        - $ref: '#/components/parameters/sqid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameUpdate'
      responses:
        '200':
          description: Game updated
        '400':
          description: Invalid input
        '404':
          description: Game not found
        '500':
          description: Server/database error
    delete:
      summary: Delete a game
      parameters:
        - $ref: '#/components/parameters/gameId'
        - $ref: '#/components/parameters/sqid'
      responses:
        '204':
          description: Game deleted
        '404':
          description: Game not found
        '500':
          description: Server/database error
  /games/{gameId}/players:
    get:
      summary: List players in a game
      parameters:
        - $ref: '#/components/parameters/gameId'
        - $ref: '#/components/parameters/sqid'
      responses:
        '200':
          description: List of players
        '404':
          description: Game not found
        '500':
          description: Server/database error
    post:
      summary: Add a player to a game
      parameters:
        - $ref: '#/components/parameters/gameId'
        - $ref: '#/components/parameters/sqid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerCreate'
      responses:
        '201':
          description: Player added
        '400':
          description: Invalid input or player limit exceeded
        '404':
          description: Game not found
        '500':
          description: Server/database error
  /players/{playerId}:
    put:
      summary: Update player
      parameters:
        - $ref: '#/components/parameters/playerId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerUpdate'
      responses:
        '200':
          description: Player updated
        '400':
          description: Invalid input
        '404':
          description: Player not found
        '500':
          description: Server/database error
    delete:
      summary: Remove a player
      parameters:
        - $ref: '#/components/parameters/playerId'
      responses:
        '204':
          description: Player removed
        '404':
          description: Player not found
        '500':
          description: Server/database error
  /games/{gameId}/rounds:
    get:
      summary: List rounds for a game
      parameters:
        - $ref: '#/components/parameters/gameId'
      responses:
        '200':
          description: List of rounds
        '404':
          description: Game not found
        '500':
          description: Server/database error
    post:
      summary: Add a new round
      parameters:
        - $ref: '#/components/parameters/gameId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoundCreate'
      responses:
        '201':
          description: Round added
        '400':
          description: Invalid input
        '404':
          description: Game not found
        '500':
          description: Server/database error
  /rounds/{roundId}/scores:
    get:
      summary: Get scores for a round
      parameters:
        - $ref: '#/components/parameters/roundId'
      responses:
        '200':
          description: List of scores
        '404':
          description: Round not found
        '500':
          description: Server/database error
    post:
      summary: Add or update scores for a round
      parameters:
        - $ref: '#/components/parameters/roundId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreCreateOrUpdate'
      responses:
        '201':
          description: Scores added/updated
        '400':
          description: Invalid input
        '404':
          description: Round or player not found
        '500':
          description: Server/database error
  /scores/{scoreId}:
    put:
      summary: Edit a score
      parameters:
        - $ref: '#/components/parameters/scoreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreUpdate'
      responses:
        '200':
          description: Score updated
        '400':
          description: Invalid input
        '404':
          description: Score not found
        '500':
          description: Server/database error
    delete:
      summary: Undo/delete a score
      parameters:
        - $ref: '#/components/parameters/scoreId'
      responses:
        '204':
          description: Score deleted
        '404':
          description: Score not found
        '500':
          description: Server/database error
  /rivalries:
    post:
      summary: Create a new rivalry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [game_type, name, sqid]
              properties:
                game_type:
                  type: string
                group_id:
                  type: integer
                  nullable: true
                name:
                  type: string
                notes:
                  type: string
                sqid:
                  type: string
      responses:
        '201':
          description: Rivalry created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rivalry'
    get:
      summary: List rivalries
      parameters:
        - in: query
          name: game_type
          schema:
            type: string
        - in: query
          name: group_id
          schema:
            type: integer
            nullable: true
        - $ref: '#/components/parameters/sqid'
      responses:
        '200':
          description: List of rivalries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rivalry'
  /rivalries/{rivalryId}/stats:
    get:
      summary: Get rivalry stats
      parameters:
        - in: path
          name: rivalryId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Rivalry stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RivaltyStats'
components:
  parameters:
    gameId:
      name: gameId
      in: path
      required: true
      schema:
        type: integer
    playerId:
      name: playerId
      in: path
      required: true
      schema:
        type: integer
    roundId:
      name: roundId
      in: path
      required: true
      schema:
        type: integer
    scoreId:
      name: scoreId
      in: path
      required: true
      schema:
        type: integer
    rivalryId:
      name: rivalryId
      in: path
      required: true
      schema:
        type: integer
    sqid:
      name: sqid
      in: query
      required: true
      schema:
        type: string
      description: Unique Sqid discriminator for user/session
  schemas:
    GameCreate:
      type: object
      required: [name, sqid]
      properties:
        name:
          type: string
        game_type:
          type: string
        target_score:
          type: integer
        notes:
          type: string
        sqid:
          type: string
    GameUpdate:
      type: object
      properties:
        name:
          type: string
        game_type:
          type: string
        target_score:
          type: integer
        notes:
          type: string
        is_active:
          type: boolean
        sqid:
          type: string
    PlayerCreate:
      type: object
      required: [name]
      properties:
        name:
          type: string
        avatar:
          type: string
        color:
          type: string
        position:
          type: integer
    PlayerUpdate:
      type: object
      properties:
        name:
          type: string
        avatar:
          type: string
        color:
          type: string
        position:
          type: integer
    RoundCreate:
      type: object
      properties:
        round_number:
          type: integer
    ScoreCreateOrUpdate:
      type: object
      required: [scores]
      properties:
        scores:
          type: array
          items:
            type: object
            required: [player_id, score]
            properties:
              player_id:
                type: integer
              score:
                type: integer
    ScoreUpdate:
      type: object
      properties:
        score:
          type: integer
    Rivalry:
      type: object
      properties:
        id:
          type: integer
        game_type:
          type: string
          example: volleyball
        group_id:
          type: integer
          nullable: true
        name:
          type: string
        notes:
          type: string
        sqid:
          type: string
    RivalryPlayer:
      type: object
      properties:
        id:
          type: integer
        rivalry_id:
          type: integer
        player_id:
          type: integer
        team_number:
          type: integer
    RivaltyStats:
      type: object
      properties:
        id:
          type: integer
        rivalry_id:
          type: integer
        wins_team1:
          type: integer
        wins_team2:
          type: integer
        total_games:
          type: integer
        avg_margin:
          type: number
          format: float
